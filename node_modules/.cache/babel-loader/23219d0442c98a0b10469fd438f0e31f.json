{"ast":null,"code":"var _jsxFileName = \"/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport '../map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    };\n  }\n\n  componentDidMount() {\n    // fetch()\n    let stores = {\n      type: 'FeatureCollection',\n      features: [{\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.034084142948, 38.909671288923]\n        },\n        properties: {\n          phoneFormatted: '(202) 234-7336',\n          phone: '2022347336',\n          address: '1471 P St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 15th St NW',\n          postalCode: '20005',\n          state: 'D.C.'\n        }\n      }]\n    };\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n\n    stores.features.forEach(function (store, i) {\n      store.properties.id = i;\n    });\n    console.log(stores);\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom // scrollZoom: true\n\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    /**\n     * Add geolocate control to the map.\n     **/\n\n    map.addControl(new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    }));\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n\n    map.addControl(new mapboxgl.NavigationControl());\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n\n    map.on('load', function (e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      });\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n\n      buildLocationList(stores);\n      addMarkers();\n    }); // /**\n    //  * Add a listing for each store to the sidebar.\n    //  **/\n    // function buildLocationList(data) {\n    //   data.features.forEach(function(store, i) {\n    //     /**\n    //      * Create a shortcut for `store.properties`,\n    //      * which will be used several times below.\n    //      **/\n    //     const prop = store.properties\n    //     /* Add a new listing section to the sidebar. */\n    //     const listings = document.getElementById('listings')\n    //     const listing = listings.appendChild(document.createElement('div'))\n    //     /* Assign a unique `id` to the listing. */\n    //     listing.id = 'listing-' + prop.id\n    //     /* Assign the `item` class to each listing for styling. */\n    //     listing.className = 'item'\n    //     /* Add the link to the individual listing created above. */\n    //     const link = listing.appendChild(document.createElement('a'))\n    //     link.href = '#'\n    //     link.className = 'title'\n    //     link.id = 'link-' + prop.id\n    //     link.innerHTML = prop.address\n    //     /* Add details to the individual listing. */\n    //     const details = listing.appendChild(document.createElement('div'))\n    //     details.innerHTML = prop.city\n    //     if (prop.phone) {\n    //       details.innerHTML += ' Â· ' + prop.phoneFormatted\n    //     }\n    //     /**\n    //      * Listen to the element and when it is hovered, do four things:\n    //      * 1. Update the `currentFeature` to the store associated with the clicked link\n    //      * 2. Fly to the point\n    //      * 3. Close all other popups and display popup for clicked store\n    //      * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     link.addEventListener('mouseover', function(e) {\n    //       for (let i = 0; i < data.features.length; i++) {\n    //         if (this.id === 'link-' + data.features[i].properties.id) {\n    //           var clickedListing = data.features[i]\n    //           flyToStore(clickedListing)\n    //           createPopUp(clickedListing)\n    //         }\n    //       }\n    //       const activeItem = document.getElementsByClassName('active')\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       this.parentNode.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Add a marker to the map for every store listing.\n    //  **/\n    // function addMarkers() {\n    //   /* For each feature in the GeoJSON object above: */\n    //   stores.features.forEach(function(marker) {\n    //     /* Create a div element for the marker. */\n    //     var el = document.createElement('div')\n    //     /* Assign a unique `id` to the marker. */\n    //     el.id = 'marker-' + marker.properties.id\n    //     /* Assign the `marker` class to each marker for styling. */\n    //     el.className = 'marker'\n    //     /**\n    //      * Create a marker using the div element\n    //      * defined above and add it to the map.\n    //      **/\n    //     new mapboxgl.Marker(el, { offset: [0, -23] })\n    //       .setLngLat(marker.geometry.coordinates)\n    //       .addTo(map)\n    //     /**\n    //      * Listen to the element and when it is clicked, do three things:\n    //      * 1. Fly to the point\n    //      * 2. Close all other popups and display popup for clicked store\n    //      * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     el.addEventListener('click', function(e) {\n    //       /* Fly to the point */\n    //       flyToStore(marker)\n    //       /* Close all other popups and display popup for clicked store */\n    //       createPopUp(marker)\n    //       /* Highlight listing in sidebar */\n    //       var activeItem = document.getElementsByClassName('active')\n    //       e.stopPropagation()\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       var listing = document.getElementById(\n    //         'listing-' + marker.properties.id\n    //       )\n    //       listing.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n    //  * a given center point.\n    //  **/\n    // function flyToStore(currentFeature) {\n    //   map.flyTo({\n    //     center: currentFeature.geometry.coordinates,\n    //     zoom: 15\n    //   })\n    // }\n    // /**\n    //  * Create a Mapbox GL JS `Popup`.\n    //  **/\n    // function createPopUp(currentFeature) {\n    //   var popUps = document.getElementsByClassName('mapboxgl-popup')\n    //   if (popUps[0]) popUps[0].remove()\n    //   var popup = new mapboxgl.Popup({ closeOnClick: false })\n    //     .setLngLat(currentFeature.geometry.coordinates)\n    //     .setHTML(\n    //       '<h3>Sweetgreen</h3>' +\n    //         '<h4>' +\n    //         currentFeature.properties.address +\n    //         '</h4>'\n    //     )\n    //     .addTo(map)\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"Hiking Trails\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","state","lng","lon","lat","zoom","componentDidMount","stores","type","features","geometry","coordinates","properties","phoneFormatted","phone","address","city","country","crossStreet","postalCode","forEach","store","i","id","console","log","map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","NavigationControl","e","addSource","data","buildLocationList","addMarkers","render","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport '../map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    }\n  }\n\n  componentDidMount() {\n    // fetch()\n    let stores = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.034084142948, 38.909671288923]\n          },\n          properties: {\n            phoneFormatted: '(202) 234-7336',\n            phone: '2022347336',\n            address: '1471 P St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 15th St NW',\n            postalCode: '20005',\n            state: 'D.C.'\n          }\n        }\n      ]\n    }\n\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n    stores.features.forEach(function(store, i) {\n      store.properties.id = i\n    })\n\n    console.log(stores)\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n      // scrollZoom: true\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    /**\n     * Add geolocate control to the map.\n     **/\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      })\n    )\n\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n    map.addControl(new mapboxgl.NavigationControl())\n\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n    map.on('load', function(e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      })\n\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n      buildLocationList(stores)\n      addMarkers()\n    })\n\n    // /**\n    //  * Add a listing for each store to the sidebar.\n    //  **/\n    // function buildLocationList(data) {\n    //   data.features.forEach(function(store, i) {\n    //     /**\n    //      * Create a shortcut for `store.properties`,\n    //      * which will be used several times below.\n    //      **/\n    //     const prop = store.properties\n\n    //     /* Add a new listing section to the sidebar. */\n    //     const listings = document.getElementById('listings')\n    //     const listing = listings.appendChild(document.createElement('div'))\n    //     /* Assign a unique `id` to the listing. */\n    //     listing.id = 'listing-' + prop.id\n    //     /* Assign the `item` class to each listing for styling. */\n    //     listing.className = 'item'\n\n    //     /* Add the link to the individual listing created above. */\n    //     const link = listing.appendChild(document.createElement('a'))\n    //     link.href = '#'\n    //     link.className = 'title'\n    //     link.id = 'link-' + prop.id\n    //     link.innerHTML = prop.address\n\n    //     /* Add details to the individual listing. */\n    //     const details = listing.appendChild(document.createElement('div'))\n    //     details.innerHTML = prop.city\n    //     if (prop.phone) {\n    //       details.innerHTML += ' Â· ' + prop.phoneFormatted\n    //     }\n\n    //     /**\n    //      * Listen to the element and when it is hovered, do four things:\n    //      * 1. Update the `currentFeature` to the store associated with the clicked link\n    //      * 2. Fly to the point\n    //      * 3. Close all other popups and display popup for clicked store\n    //      * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n\n    //     link.addEventListener('mouseover', function(e) {\n    //       for (let i = 0; i < data.features.length; i++) {\n    //         if (this.id === 'link-' + data.features[i].properties.id) {\n    //           var clickedListing = data.features[i]\n    //           flyToStore(clickedListing)\n    //           createPopUp(clickedListing)\n    //         }\n    //       }\n    //       const activeItem = document.getElementsByClassName('active')\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       this.parentNode.classList.add('active')\n    //     })\n    //   })\n    // }\n\n    // /**\n    //  * Add a marker to the map for every store listing.\n    //  **/\n    // function addMarkers() {\n    //   /* For each feature in the GeoJSON object above: */\n    //   stores.features.forEach(function(marker) {\n    //     /* Create a div element for the marker. */\n    //     var el = document.createElement('div')\n    //     /* Assign a unique `id` to the marker. */\n    //     el.id = 'marker-' + marker.properties.id\n    //     /* Assign the `marker` class to each marker for styling. */\n    //     el.className = 'marker'\n\n    //     /**\n    //      * Create a marker using the div element\n    //      * defined above and add it to the map.\n    //      **/\n    //     new mapboxgl.Marker(el, { offset: [0, -23] })\n    //       .setLngLat(marker.geometry.coordinates)\n    //       .addTo(map)\n\n    //     /**\n    //      * Listen to the element and when it is clicked, do three things:\n    //      * 1. Fly to the point\n    //      * 2. Close all other popups and display popup for clicked store\n    //      * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     el.addEventListener('click', function(e) {\n    //       /* Fly to the point */\n    //       flyToStore(marker)\n    //       /* Close all other popups and display popup for clicked store */\n    //       createPopUp(marker)\n    //       /* Highlight listing in sidebar */\n    //       var activeItem = document.getElementsByClassName('active')\n    //       e.stopPropagation()\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       var listing = document.getElementById(\n    //         'listing-' + marker.properties.id\n    //       )\n    //       listing.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n    //  * a given center point.\n    //  **/\n    // function flyToStore(currentFeature) {\n    //   map.flyTo({\n    //     center: currentFeature.geometry.coordinates,\n    //     zoom: 15\n    //   })\n    // }\n\n    // /**\n    //  * Create a Mapbox GL JS `Popup`.\n    //  **/\n    // function createPopUp(currentFeature) {\n    //   var popUps = document.getElementsByClassName('mapboxgl-popup')\n    //   if (popUps[0]) popUps[0].remove()\n    //   var popup = new mapboxgl.Popup({ closeOnClick: false })\n    //     .setLngLat(currentFeature.geometry.coordinates)\n    //     .setHTML(\n    //       '<h3>Sweetgreen</h3>' +\n    //         '<h4>' +\n    //         currentFeature.properties.address +\n    //         '</h4>'\n    //     )\n    //     .addTo(map)\n    // }\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Hiking Trails</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"map\" />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}