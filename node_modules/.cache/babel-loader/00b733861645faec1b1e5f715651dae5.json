{"ast":null,"code":"var _jsxFileName = \"/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.flyToStore = currentFeature => {\n      this.map.flyTo({\n        center: currentFeature.geometry.coordinates,\n        zoom: 15\n      });\n    };\n\n    this.createPopUp = currentFeature => {\n      var popUps = document.getElementsByClassName('mapboxgl-popup');\n      if (popUps[0]) popUps[0].remove();\n      var popup = new mapboxgl.Popup({\n        closeOnClick: false\n      }).setLngLat(currentFeature.geometry.coordinates).setHTML('<h3>Sweetgreen</h3>' + '<h4>' + currentFeature.properties.address + '</h4>').addTo(this.map);\n    };\n\n    this.state = {\n      lng: -77.034084142948,\n      lat: 38.909671288923,\n      zoom: 12\n    };\n    this.buildLocationList.bind(this);\n    this.addMarkers.bind(this);\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [{\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.034084142948, 38.909671288923]\n        },\n        properties: {\n          phoneFormatted: '(202) 234-7336',\n          phone: '2022347336',\n          address: '1471 P St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 15th St NW',\n          postalCode: '20005',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.049766, 38.900772]\n        },\n        properties: {\n          phoneFormatted: '(202) 507-8357',\n          phone: '2025078357',\n          address: '2221 I St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 22nd St NW',\n          postalCode: '20037',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043929, 38.910525]\n        },\n        properties: {\n          phoneFormatted: '(202) 387-9338',\n          phone: '2023879338',\n          address: '1512 Connecticut Ave NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at Dupont Circle',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.0672, 38.90516896]\n        },\n        properties: {\n          phoneFormatted: '(202) 337-9338',\n          phone: '2023379338',\n          address: '3333 M St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 34th St NW',\n          postalCode: '20007',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.002583742142, 38.887041080933]\n        },\n        properties: {\n          phoneFormatted: '(202) 547-9338',\n          phone: '2025479338',\n          address: '221 Pennsylvania Ave SE',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'btwn 2nd & 3rd Sts. SE',\n          postalCode: '20003',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-76.933492720127, 38.99225245786]\n        },\n        properties: {\n          address: '8204 Baltimore Ave',\n          city: 'College Park',\n          country: 'United States',\n          postalCode: '20740',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.097083330154, 38.980979]\n        },\n        properties: {\n          phoneFormatted: '(301) 654-7336',\n          phone: '3016547336',\n          address: '4831 Bethesda Ave',\n          cc: 'US',\n          city: 'Bethesda',\n          country: 'United States',\n          postalCode: '20814',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.359425054188, 38.958058116661]\n        },\n        properties: {\n          phoneFormatted: '(571) 203-0082',\n          phone: '5712030082',\n          address: '11935 Democracy Dr',\n          city: 'Reston',\n          country: 'United States',\n          crossStreet: 'btw Explorer & Library',\n          postalCode: '20190',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.10853099823, 38.880100922392]\n        },\n        properties: {\n          phoneFormatted: '(703) 522-2016',\n          phone: '7035222016',\n          address: '4075 Wilson Blvd',\n          city: 'Arlington',\n          country: 'United States',\n          crossStreet: 'at N Randolph St.',\n          postalCode: '22203',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.28784, 40.008008]\n        },\n        properties: {\n          phoneFormatted: '(610) 642-9400',\n          phone: '6106429400',\n          address: '68 Coulter Ave',\n          city: 'Ardmore',\n          country: 'United States',\n          postalCode: '19003',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.20121216774, 39.954030175164]\n        },\n        properties: {\n          phoneFormatted: '(215) 386-1365',\n          phone: '2153861365',\n          address: '3925 Walnut St',\n          city: 'Philadelphia',\n          country: 'United States',\n          postalCode: '19104',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043959498405, 38.903883387232]\n        },\n        properties: {\n          phoneFormatted: '(202) 331-3355',\n          phone: '2023313355',\n          address: '1901 L St. NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 19th St',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }]\n    };\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n\n    stores.features.forEach(function (store, i) {\n      store.properties.id = i;\n    });\n    console.log(stores);\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom // scrollZoom: true\n\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    /**\n     * Add geolocate control to the map.\n     **/\n\n    map.addControl(new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    }));\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n\n    map.addControl(new mapboxgl.NavigationControl());\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n\n    map.on('load', function (e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      });\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n\n      this.buildLocationList(stores);\n      this.addMarkers();\n    });\n  }\n  /**\n   * Add a listing for each store to the sidebar.\n   **/\n\n\n  buildLocationList(data) {\n    data.features.forEach(function (store, i) {\n      /**\n       * Create a shortcut for `store.properties`,\n       * which will be used several times below.\n       **/\n      const prop = store.properties;\n      /* Add a new listing section to the sidebar. */\n\n      const listings = document.getElementById('listings');\n      const listing = listings.appendChild(document.createElement('div'));\n      /* Assign a unique `id` to the listing. */\n\n      listing.id = 'listing-' + prop.id;\n      /* Assign the `item` class to each listing for styling. */\n\n      listing.className = 'item';\n      /* Add the link to the individual listing created above. */\n\n      const link = listing.appendChild(document.createElement('a'));\n      link.href = '#';\n      link.className = 'title';\n      link.id = 'link-' + prop.id;\n      link.innerHTML = prop.address;\n      /* Add details to the individual listing. */\n\n      const details = listing.appendChild(document.createElement('div'));\n      details.innerHTML = prop.city;\n\n      if (prop.phone) {\n        details.innerHTML += ' Â· ' + prop.phoneFormatted;\n      }\n      /**\n       * Listen to the element and when it is hovered, do four things:\n       * 1. Update the `currentFeature` to the store associated with the clicked link\n       * 2. Fly to the point\n       * 3. Close all other popups and display popup for clicked store\n       * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n       **/\n\n\n      link.addEventListener('mouseover', function (e) {\n        for (let i = 0; i < data.features.length; i++) {\n          if (this.id === 'link-' + data.features[i].properties.id) {\n            var clickedListing = data.features[i];\n            this.flyToStore(clickedListing);\n            this.createPopUp(clickedListing);\n          }\n        }\n\n        const activeItem = document.getElementsByClassName('active');\n\n        if (activeItem[0]) {\n          activeItem[0].classList.remove('active');\n        }\n\n        this.parentNode.classList.add('active');\n      });\n    });\n  }\n  /**\n   * Add a marker to the map for every store listing.\n   **/\n\n\n  addMarkers() {\n    /* For each feature in the GeoJSON object above: */\n    this.stores.features.forEach(function (marker) {\n      /* Create a div element for the marker. */\n      var el = document.createElement('div');\n      /* Assign a unique `id` to the marker. */\n\n      el.id = 'marker-' + marker.properties.id;\n      /* Assign the `marker` class to each marker for styling. */\n\n      el.className = 'marker';\n      /**\n       * Create a marker using the div element\n       * defined above and add it to the map.\n       **/\n\n      new mapboxgl.Marker(el, {\n        offset: [0, -23]\n      }).setLngLat(marker.geometry.coordinates).addTo(this.map);\n      /**\n       * Listen to the element and when it is clicked, do three things:\n       * 1. Fly to the point\n       * 2. Close all other popups and display popup for clicked store\n       * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n       **/\n\n      el.addEventListener('click', function (e) {\n        /* Fly to the point */\n        this.flyToStore(marker);\n        /* Close all other popups and display popup for clicked store */\n\n        this.createPopUp(marker);\n        /* Highlight listing in sidebar */\n\n        var activeItem = document.getElementsByClassName('active');\n        e.stopPropagation();\n\n        if (activeItem[0]) {\n          activeItem[0].classList.remove('active');\n        }\n\n        var listing = document.getElementById('listing-' + marker.properties.id);\n        listing.classList.add('active');\n      });\n    });\n  }\n  /**\n   * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n   * a given center point.\n   **/\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, \"Hiking Trails\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","flyToStore","currentFeature","map","flyTo","center","geometry","coordinates","zoom","createPopUp","popUps","document","getElementsByClassName","remove","popup","Popup","closeOnClick","setLngLat","setHTML","properties","address","addTo","state","lng","lat","buildLocationList","bind","addMarkers","componentDidMount","stores","type","features","phoneFormatted","phone","city","country","crossStreet","postalCode","cc","forEach","store","i","id","console","log","container","mapContainer","style","on","setState","getCenter","toFixed","getZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","NavigationControl","e","addSource","data","prop","listings","getElementById","listing","appendChild","createElement","className","link","href","innerHTML","details","addEventListener","length","clickedListing","activeItem","classList","parentNode","add","marker","el","Marker","offset","stopPropagation","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport './map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: -77.034084142948,\n      lat: 38.909671288923,\n      zoom: 12\n    }\n\n    this.buildLocationList.bind(this)\n    this.addMarkers.bind(this)\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.034084142948, 38.909671288923]\n          },\n          properties: {\n            phoneFormatted: '(202) 234-7336',\n            phone: '2022347336',\n            address: '1471 P St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 15th St NW',\n            postalCode: '20005',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.049766, 38.900772]\n          },\n          properties: {\n            phoneFormatted: '(202) 507-8357',\n            phone: '2025078357',\n            address: '2221 I St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 22nd St NW',\n            postalCode: '20037',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043929, 38.910525]\n          },\n          properties: {\n            phoneFormatted: '(202) 387-9338',\n            phone: '2023879338',\n            address: '1512 Connecticut Ave NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at Dupont Circle',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.0672, 38.90516896]\n          },\n          properties: {\n            phoneFormatted: '(202) 337-9338',\n            phone: '2023379338',\n            address: '3333 M St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 34th St NW',\n            postalCode: '20007',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.002583742142, 38.887041080933]\n          },\n          properties: {\n            phoneFormatted: '(202) 547-9338',\n            phone: '2025479338',\n            address: '221 Pennsylvania Ave SE',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'btwn 2nd & 3rd Sts. SE',\n            postalCode: '20003',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-76.933492720127, 38.99225245786]\n          },\n          properties: {\n            address: '8204 Baltimore Ave',\n            city: 'College Park',\n            country: 'United States',\n            postalCode: '20740',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.097083330154, 38.980979]\n          },\n          properties: {\n            phoneFormatted: '(301) 654-7336',\n            phone: '3016547336',\n            address: '4831 Bethesda Ave',\n            cc: 'US',\n            city: 'Bethesda',\n            country: 'United States',\n            postalCode: '20814',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.359425054188, 38.958058116661]\n          },\n          properties: {\n            phoneFormatted: '(571) 203-0082',\n            phone: '5712030082',\n            address: '11935 Democracy Dr',\n            city: 'Reston',\n            country: 'United States',\n            crossStreet: 'btw Explorer & Library',\n            postalCode: '20190',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.10853099823, 38.880100922392]\n          },\n          properties: {\n            phoneFormatted: '(703) 522-2016',\n            phone: '7035222016',\n            address: '4075 Wilson Blvd',\n            city: 'Arlington',\n            country: 'United States',\n            crossStreet: 'at N Randolph St.',\n            postalCode: '22203',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.28784, 40.008008]\n          },\n          properties: {\n            phoneFormatted: '(610) 642-9400',\n            phone: '6106429400',\n            address: '68 Coulter Ave',\n            city: 'Ardmore',\n            country: 'United States',\n            postalCode: '19003',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.20121216774, 39.954030175164]\n          },\n          properties: {\n            phoneFormatted: '(215) 386-1365',\n            phone: '2153861365',\n            address: '3925 Walnut St',\n            city: 'Philadelphia',\n            country: 'United States',\n            postalCode: '19104',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043959498405, 38.903883387232]\n          },\n          properties: {\n            phoneFormatted: '(202) 331-3355',\n            phone: '2023313355',\n            address: '1901 L St. NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 19th St',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        }\n      ]\n    }\n\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n    stores.features.forEach(function(store, i) {\n      store.properties.id = i\n    })\n\n    console.log(stores)\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n      // scrollZoom: true\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    /**\n     * Add geolocate control to the map.\n     **/\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      })\n    )\n\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n    map.addControl(new mapboxgl.NavigationControl())\n\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n    map.on('load', function(e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      })\n\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n\n      this.buildLocationList(stores)\n      this.addMarkers()\n    })\n  }\n\n  /**\n   * Add a listing for each store to the sidebar.\n   **/\n  buildLocationList(data) {\n    data.features.forEach(function(store, i) {\n      /**\n       * Create a shortcut for `store.properties`,\n       * which will be used several times below.\n       **/\n      const prop = store.properties\n\n      /* Add a new listing section to the sidebar. */\n      const listings = document.getElementById('listings')\n      const listing = listings.appendChild(document.createElement('div'))\n      /* Assign a unique `id` to the listing. */\n      listing.id = 'listing-' + prop.id\n      /* Assign the `item` class to each listing for styling. */\n      listing.className = 'item'\n\n      /* Add the link to the individual listing created above. */\n      const link = listing.appendChild(document.createElement('a'))\n      link.href = '#'\n      link.className = 'title'\n      link.id = 'link-' + prop.id\n      link.innerHTML = prop.address\n\n      /* Add details to the individual listing. */\n      const details = listing.appendChild(document.createElement('div'))\n      details.innerHTML = prop.city\n      if (prop.phone) {\n        details.innerHTML += ' Â· ' + prop.phoneFormatted\n      }\n\n      /**\n       * Listen to the element and when it is hovered, do four things:\n       * 1. Update the `currentFeature` to the store associated with the clicked link\n       * 2. Fly to the point\n       * 3. Close all other popups and display popup for clicked store\n       * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n       **/\n\n      link.addEventListener('mouseover', function(e) {\n        for (let i = 0; i < data.features.length; i++) {\n          if (this.id === 'link-' + data.features[i].properties.id) {\n            var clickedListing = data.features[i]\n            this.flyToStore(clickedListing)\n            this.createPopUp(clickedListing)\n          }\n        }\n        const activeItem = document.getElementsByClassName('active')\n        if (activeItem[0]) {\n          activeItem[0].classList.remove('active')\n        }\n        this.parentNode.classList.add('active')\n      })\n    })\n  }\n\n  /**\n   * Add a marker to the map for every store listing.\n   **/\n  addMarkers() {\n    /* For each feature in the GeoJSON object above: */\n    this.stores.features.forEach(function(marker) {\n      /* Create a div element for the marker. */\n      var el = document.createElement('div')\n      /* Assign a unique `id` to the marker. */\n      el.id = 'marker-' + marker.properties.id\n      /* Assign the `marker` class to each marker for styling. */\n      el.className = 'marker'\n\n      /**\n       * Create a marker using the div element\n       * defined above and add it to the map.\n       **/\n      new mapboxgl.Marker(el, { offset: [0, -23] })\n        .setLngLat(marker.geometry.coordinates)\n        .addTo(this.map)\n\n      /**\n       * Listen to the element and when it is clicked, do three things:\n       * 1. Fly to the point\n       * 2. Close all other popups and display popup for clicked store\n       * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n       **/\n      el.addEventListener('click', function(e) {\n        /* Fly to the point */\n        this.flyToStore(marker)\n        /* Close all other popups and display popup for clicked store */\n        this.createPopUp(marker)\n        /* Highlight listing in sidebar */\n        var activeItem = document.getElementsByClassName('active')\n        e.stopPropagation()\n        if (activeItem[0]) {\n          activeItem[0].classList.remove('active')\n        }\n        var listing = document.getElementById('listing-' + marker.properties.id)\n        listing.classList.add('active')\n      })\n    })\n  }\n  /**\n   * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n   * a given center point.\n   **/\n  flyToStore = currentFeature => {\n    this.map.flyTo({\n      center: currentFeature.geometry.coordinates,\n      zoom: 15\n    })\n  }\n\n  /**\n   * Create a Mapbox GL JS `Popup`.\n   **/\n  createPopUp = currentFeature => {\n    var popUps = document.getElementsByClassName('mapboxgl-popup')\n    if (popUps[0]) popUps[0].remove()\n    var popup = new mapboxgl.Popup({ closeOnClick: false })\n      .setLngLat(currentFeature.geometry.coordinates)\n      .setHTML(\n        '<h3>Sweetgreen</h3>' +\n          '<h4>' +\n          currentFeature.properties.address +\n          '</h4>'\n      )\n      .addTo(this.map)\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Hiking Trails</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"map\" />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}