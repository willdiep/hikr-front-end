{"ast":null,"code":"var _jsxFileName = \"/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -122.420174,\n      lat: 37.780079,\n      zoom: 12\n    };\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [{\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.034084142948, 38.909671288923]\n        },\n        properties: {\n          phoneFormatted: '(202) 234-7336',\n          phone: '2022347336',\n          address: '1471 P St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 15th St NW',\n          postalCode: '20005',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.049766, 38.900772]\n        },\n        properties: {\n          phoneFormatted: '(202) 507-8357',\n          phone: '2025078357',\n          address: '2221 I St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 22nd St NW',\n          postalCode: '20037',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043929, 38.910525]\n        },\n        properties: {\n          phoneFormatted: '(202) 387-9338',\n          phone: '2023879338',\n          address: '1512 Connecticut Ave NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at Dupont Circle',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.0672, 38.90516896]\n        },\n        properties: {\n          phoneFormatted: '(202) 337-9338',\n          phone: '2023379338',\n          address: '3333 M St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 34th St NW',\n          postalCode: '20007',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.002583742142, 38.887041080933]\n        },\n        properties: {\n          phoneFormatted: '(202) 547-9338',\n          phone: '2025479338',\n          address: '221 Pennsylvania Ave SE',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'btwn 2nd & 3rd Sts. SE',\n          postalCode: '20003',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-76.933492720127, 38.99225245786]\n        },\n        properties: {\n          address: '8204 Baltimore Ave',\n          city: 'College Park',\n          country: 'United States',\n          postalCode: '20740',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.097083330154, 38.980979]\n        },\n        properties: {\n          phoneFormatted: '(301) 654-7336',\n          phone: '3016547336',\n          address: '4831 Bethesda Ave',\n          cc: 'US',\n          city: 'Bethesda',\n          country: 'United States',\n          postalCode: '20814',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.359425054188, 38.958058116661]\n        },\n        properties: {\n          phoneFormatted: '(571) 203-0082',\n          phone: '5712030082',\n          address: '11935 Democracy Dr',\n          city: 'Reston',\n          country: 'United States',\n          crossStreet: 'btw Explorer & Library',\n          postalCode: '20190',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.10853099823, 38.880100922392]\n        },\n        properties: {\n          phoneFormatted: '(703) 522-2016',\n          phone: '7035222016',\n          address: '4075 Wilson Blvd',\n          city: 'Arlington',\n          country: 'United States',\n          crossStreet: 'at N Randolph St.',\n          postalCode: '22203',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.28784, 40.008008]\n        },\n        properties: {\n          phoneFormatted: '(610) 642-9400',\n          phone: '6106429400',\n          address: '68 Coulter Ave',\n          city: 'Ardmore',\n          country: 'United States',\n          postalCode: '19003',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.20121216774, 39.954030175164]\n        },\n        properties: {\n          phoneFormatted: '(215) 386-1365',\n          phone: '2153861365',\n          address: '3925 Walnut St',\n          city: 'Philadelphia',\n          country: 'United States',\n          postalCode: '19104',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043959498405, 38.903883387232]\n        },\n        properties: {\n          phoneFormatted: '(202) 331-3355',\n          phone: '2023313355',\n          address: '1901 L St. NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 19th St',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }]\n    };\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n\n    stores.features.forEach(function (store, i) {\n      store.properties.id = i;\n    });\n    console.log(stores);\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom // scrollZoom: true\n\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    /**\n     * Add geolocate control to the map.\n     **/\n\n    map.addControl(new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    }));\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n\n    map.addControl(new mapboxgl.NavigationControl());\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n\n    map.on('load', function (e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      });\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n      // buildLocationList(stores)\n      // addMarkers()\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Our locations\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map pad2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","state","lng","lat","zoom","componentDidMount","stores","type","features","geometry","coordinates","properties","phoneFormatted","phone","address","city","country","crossStreet","postalCode","cc","forEach","store","i","id","console","log","map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","NavigationControl","e","addSource","data","render","el"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport './map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: -122.420174,\n      lat: 37.780079,\n      zoom: 12\n    }\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.034084142948, 38.909671288923]\n          },\n          properties: {\n            phoneFormatted: '(202) 234-7336',\n            phone: '2022347336',\n            address: '1471 P St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 15th St NW',\n            postalCode: '20005',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.049766, 38.900772]\n          },\n          properties: {\n            phoneFormatted: '(202) 507-8357',\n            phone: '2025078357',\n            address: '2221 I St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 22nd St NW',\n            postalCode: '20037',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043929, 38.910525]\n          },\n          properties: {\n            phoneFormatted: '(202) 387-9338',\n            phone: '2023879338',\n            address: '1512 Connecticut Ave NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at Dupont Circle',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.0672, 38.90516896]\n          },\n          properties: {\n            phoneFormatted: '(202) 337-9338',\n            phone: '2023379338',\n            address: '3333 M St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 34th St NW',\n            postalCode: '20007',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.002583742142, 38.887041080933]\n          },\n          properties: {\n            phoneFormatted: '(202) 547-9338',\n            phone: '2025479338',\n            address: '221 Pennsylvania Ave SE',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'btwn 2nd & 3rd Sts. SE',\n            postalCode: '20003',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-76.933492720127, 38.99225245786]\n          },\n          properties: {\n            address: '8204 Baltimore Ave',\n            city: 'College Park',\n            country: 'United States',\n            postalCode: '20740',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.097083330154, 38.980979]\n          },\n          properties: {\n            phoneFormatted: '(301) 654-7336',\n            phone: '3016547336',\n            address: '4831 Bethesda Ave',\n            cc: 'US',\n            city: 'Bethesda',\n            country: 'United States',\n            postalCode: '20814',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.359425054188, 38.958058116661]\n          },\n          properties: {\n            phoneFormatted: '(571) 203-0082',\n            phone: '5712030082',\n            address: '11935 Democracy Dr',\n            city: 'Reston',\n            country: 'United States',\n            crossStreet: 'btw Explorer & Library',\n            postalCode: '20190',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.10853099823, 38.880100922392]\n          },\n          properties: {\n            phoneFormatted: '(703) 522-2016',\n            phone: '7035222016',\n            address: '4075 Wilson Blvd',\n            city: 'Arlington',\n            country: 'United States',\n            crossStreet: 'at N Randolph St.',\n            postalCode: '22203',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.28784, 40.008008]\n          },\n          properties: {\n            phoneFormatted: '(610) 642-9400',\n            phone: '6106429400',\n            address: '68 Coulter Ave',\n            city: 'Ardmore',\n            country: 'United States',\n            postalCode: '19003',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.20121216774, 39.954030175164]\n          },\n          properties: {\n            phoneFormatted: '(215) 386-1365',\n            phone: '2153861365',\n            address: '3925 Walnut St',\n            city: 'Philadelphia',\n            country: 'United States',\n            postalCode: '19104',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043959498405, 38.903883387232]\n          },\n          properties: {\n            phoneFormatted: '(202) 331-3355',\n            phone: '2023313355',\n            address: '1901 L St. NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 19th St',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        }\n      ]\n    }\n\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n    stores.features.forEach(function(store, i) {\n      store.properties.id = i\n    })\n\n    console.log(stores)\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n      // scrollZoom: true\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    /**\n     * Add geolocate control to the map.\n     **/\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      })\n    )\n\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n    map.addControl(new mapboxgl.NavigationControl())\n\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n    map.on('load', function(e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      })\n\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n      // buildLocationList(stores)\n      // addMarkers()\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Our locations</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div\n          ref={el => (this.mapContainer = el)}\n          className=\"map pad2\"\n        />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}