{"ast":null,"code":"var _jsxFileName = \"/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addMarkers = () => {\n      /* For each feature in the GeoJSON object above: */\n      this.stores.features.forEach(function (marker) {\n        /* Create a div element for the marker. */\n        var el = document.createElement('div');\n        /* Assign a unique `id` to the marker. */\n\n        el.id = 'marker-' + marker.properties.id;\n        /* Assign the `marker` class to each marker for styling. */\n\n        el.className = 'marker';\n        /**\n         * Create a marker using the div element\n         * defined above and add it to the map.\n         **/\n\n        new mapboxgl.Marker(el, {\n          offset: [0, -23]\n        }).setLngLat(marker.geometry.coordinates).addTo(this.map);\n        /**\n         * Listen to the element and when it is clicked, do three things:\n         * 1. Fly to the point\n         * 2. Close all other popups and display popup for clicked store\n         * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n\n        el.addEventListener('click', function (e) {\n          /* Fly to the point */\n          this.flyToStore(marker);\n          /* Close all other popups and display popup for clicked store */\n\n          this.createPopUp(marker);\n          /* Highlight listing in sidebar */\n\n          var activeItem = document.getElementsByClassName('active');\n          e.stopPropagation();\n\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active');\n          }\n\n          var listing = document.getElementById('listing-' + marker.properties.id);\n          listing.classList.add('active');\n        });\n      });\n    };\n\n    this.flyToStore = currentFeature => {\n      this.map.flyTo({\n        center: currentFeature.geometry.coordinates,\n        zoom: 15\n      });\n    };\n\n    this.createPopUp = currentFeature => {\n      var popUps = document.getElementsByClassName('mapboxgl-popup');\n      if (popUps[0]) popUps[0].remove();\n      var popup = new mapboxgl.Popup({\n        closeOnClick: false\n      }).setLngLat(currentFeature.geometry.coordinates).setHTML('<h3>Sweetgreen</h3>' + '<h4>' + currentFeature.properties.address + '</h4>').addTo(this.map);\n    };\n\n    this.state = {\n      lng: -77.034084142948,\n      lat: 38.909671288923,\n      zoom: 12\n    };\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [{\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.034084142948, 38.909671288923]\n        },\n        properties: {\n          phoneFormatted: '(202) 234-7336',\n          phone: '2022347336',\n          address: '1471 P St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 15th St NW',\n          postalCode: '20005',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.049766, 38.900772]\n        },\n        properties: {\n          phoneFormatted: '(202) 507-8357',\n          phone: '2025078357',\n          address: '2221 I St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 22nd St NW',\n          postalCode: '20037',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043929, 38.910525]\n        },\n        properties: {\n          phoneFormatted: '(202) 387-9338',\n          phone: '2023879338',\n          address: '1512 Connecticut Ave NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at Dupont Circle',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.0672, 38.90516896]\n        },\n        properties: {\n          phoneFormatted: '(202) 337-9338',\n          phone: '2023379338',\n          address: '3333 M St NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 34th St NW',\n          postalCode: '20007',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.002583742142, 38.887041080933]\n        },\n        properties: {\n          phoneFormatted: '(202) 547-9338',\n          phone: '2025479338',\n          address: '221 Pennsylvania Ave SE',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'btwn 2nd & 3rd Sts. SE',\n          postalCode: '20003',\n          state: 'D.C.'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-76.933492720127, 38.99225245786]\n        },\n        properties: {\n          address: '8204 Baltimore Ave',\n          city: 'College Park',\n          country: 'United States',\n          postalCode: '20740',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.097083330154, 38.980979]\n        },\n        properties: {\n          phoneFormatted: '(301) 654-7336',\n          phone: '3016547336',\n          address: '4831 Bethesda Ave',\n          cc: 'US',\n          city: 'Bethesda',\n          country: 'United States',\n          postalCode: '20814',\n          state: 'MD'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.359425054188, 38.958058116661]\n        },\n        properties: {\n          phoneFormatted: '(571) 203-0082',\n          phone: '5712030082',\n          address: '11935 Democracy Dr',\n          city: 'Reston',\n          country: 'United States',\n          crossStreet: 'btw Explorer & Library',\n          postalCode: '20190',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.10853099823, 38.880100922392]\n        },\n        properties: {\n          phoneFormatted: '(703) 522-2016',\n          phone: '7035222016',\n          address: '4075 Wilson Blvd',\n          city: 'Arlington',\n          country: 'United States',\n          crossStreet: 'at N Randolph St.',\n          postalCode: '22203',\n          state: 'VA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.28784, 40.008008]\n        },\n        properties: {\n          phoneFormatted: '(610) 642-9400',\n          phone: '6106429400',\n          address: '68 Coulter Ave',\n          city: 'Ardmore',\n          country: 'United States',\n          postalCode: '19003',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-75.20121216774, 39.954030175164]\n        },\n        properties: {\n          phoneFormatted: '(215) 386-1365',\n          phone: '2153861365',\n          address: '3925 Walnut St',\n          city: 'Philadelphia',\n          country: 'United States',\n          postalCode: '19104',\n          state: 'PA'\n        }\n      }, {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [-77.043959498405, 38.903883387232]\n        },\n        properties: {\n          phoneFormatted: '(202) 331-3355',\n          phone: '2023313355',\n          address: '1901 L St. NW',\n          city: 'Washington DC',\n          country: 'United States',\n          crossStreet: 'at 19th St',\n          postalCode: '20036',\n          state: 'D.C.'\n        }\n      }]\n    };\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n\n    stores.features.forEach(function (store, i) {\n      store.properties.id = i;\n    });\n    console.log(stores);\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom // scrollZoom: true\n\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    /**\n     * Add geolocate control to the map.\n     **/\n\n    map.addControl(new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    }));\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n\n    map.addControl(new mapboxgl.NavigationControl());\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n\n    map.on('load', function (e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      });\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n\n      this.buildLocationList.bind(this);\n      this.addMarkers.bind(this);\n      buildLocationList(stores);\n      addMarkers();\n    });\n  }\n  /**\n      * Add a listing for each store to the sidebar.\n      **/\n\n\n  buildLocationList(data) {\n    data.features.forEach(function (store, i) {\n      /**\n       * Create a shortcut for `store.properties`,\n       * which will be used several times below.\n       **/\n      const prop = store.properties;\n      /* Add a new listing section to the sidebar. */\n\n      const listings = document.getElementById('listings');\n      const listing = listings.appendChild(document.createElement('div'));\n      /* Assign a unique `id` to the listing. */\n\n      listing.id = 'listing-' + prop.id;\n      /* Assign the `item` class to each listing for styling. */\n\n      listing.className = 'item';\n      /* Add the link to the individual listing created above. */\n\n      const link = listing.appendChild(document.createElement('a'));\n      link.href = '#';\n      link.className = 'title';\n      link.id = 'link-' + prop.id;\n      link.innerHTML = prop.address;\n      /* Add details to the individual listing. */\n\n      const details = listing.appendChild(document.createElement('div'));\n      details.innerHTML = prop.city;\n\n      if (prop.phone) {\n        details.innerHTML += ' · ' + prop.phoneFormatted;\n      }\n      /**\n       * Listen to the element and when it is hovered, do four things:\n       * 1. Update the `currentFeature` to the store associated with the clicked link\n       * 2. Fly to the point\n       * 3. Close all other popups and display popup for clicked store\n       * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n       **/\n\n\n      link.addEventListener('mouseover', function (e) {\n        for (let i = 0; i < data.features.length; i++) {\n          if (this.id === 'link-' + data.features[i].properties.id) {\n            var clickedListing = data.features[i];\n            this.flyToStore(clickedListing);\n            this.createPopUp(clickedListing);\n          }\n        }\n\n        const activeItem = document.getElementsByClassName('active');\n\n        if (activeItem[0]) {\n          activeItem[0].classList.remove('active');\n        }\n\n        this.parentNode.classList.add('active');\n      });\n    });\n  }\n  /**\n   * Add a marker to the map for every store listing.\n   **/\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Hiking Trails\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/willmacbook/Desktop/hikr-react-store-locator-test/src/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","addMarkers","stores","features","forEach","marker","el","document","createElement","id","properties","className","Marker","offset","setLngLat","geometry","coordinates","addTo","map","addEventListener","e","flyToStore","createPopUp","activeItem","getElementsByClassName","stopPropagation","classList","remove","listing","getElementById","add","currentFeature","flyTo","center","zoom","popUps","popup","Popup","closeOnClick","setHTML","address","state","lng","lat","componentDidMount","type","phoneFormatted","phone","city","country","crossStreet","postalCode","cc","store","i","console","log","container","mapContainer","style","on","setState","getCenter","toFixed","getZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","NavigationControl","addSource","data","buildLocationList","bind","prop","listings","appendChild","link","href","innerHTML","details","length","clickedListing","parentNode","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport './map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: -77.034084142948,\n      lat: 38.909671288923,\n      zoom: 12\n    }\n  }\n\n  componentDidMount() {\n    let stores = {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.034084142948, 38.909671288923]\n          },\n          properties: {\n            phoneFormatted: '(202) 234-7336',\n            phone: '2022347336',\n            address: '1471 P St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 15th St NW',\n            postalCode: '20005',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.049766, 38.900772]\n          },\n          properties: {\n            phoneFormatted: '(202) 507-8357',\n            phone: '2025078357',\n            address: '2221 I St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 22nd St NW',\n            postalCode: '20037',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043929, 38.910525]\n          },\n          properties: {\n            phoneFormatted: '(202) 387-9338',\n            phone: '2023879338',\n            address: '1512 Connecticut Ave NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at Dupont Circle',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.0672, 38.90516896]\n          },\n          properties: {\n            phoneFormatted: '(202) 337-9338',\n            phone: '2023379338',\n            address: '3333 M St NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 34th St NW',\n            postalCode: '20007',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.002583742142, 38.887041080933]\n          },\n          properties: {\n            phoneFormatted: '(202) 547-9338',\n            phone: '2025479338',\n            address: '221 Pennsylvania Ave SE',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'btwn 2nd & 3rd Sts. SE',\n            postalCode: '20003',\n            state: 'D.C.'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-76.933492720127, 38.99225245786]\n          },\n          properties: {\n            address: '8204 Baltimore Ave',\n            city: 'College Park',\n            country: 'United States',\n            postalCode: '20740',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.097083330154, 38.980979]\n          },\n          properties: {\n            phoneFormatted: '(301) 654-7336',\n            phone: '3016547336',\n            address: '4831 Bethesda Ave',\n            cc: 'US',\n            city: 'Bethesda',\n            country: 'United States',\n            postalCode: '20814',\n            state: 'MD'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.359425054188, 38.958058116661]\n          },\n          properties: {\n            phoneFormatted: '(571) 203-0082',\n            phone: '5712030082',\n            address: '11935 Democracy Dr',\n            city: 'Reston',\n            country: 'United States',\n            crossStreet: 'btw Explorer & Library',\n            postalCode: '20190',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.10853099823, 38.880100922392]\n          },\n          properties: {\n            phoneFormatted: '(703) 522-2016',\n            phone: '7035222016',\n            address: '4075 Wilson Blvd',\n            city: 'Arlington',\n            country: 'United States',\n            crossStreet: 'at N Randolph St.',\n            postalCode: '22203',\n            state: 'VA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.28784, 40.008008]\n          },\n          properties: {\n            phoneFormatted: '(610) 642-9400',\n            phone: '6106429400',\n            address: '68 Coulter Ave',\n            city: 'Ardmore',\n            country: 'United States',\n            postalCode: '19003',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-75.20121216774, 39.954030175164]\n          },\n          properties: {\n            phoneFormatted: '(215) 386-1365',\n            phone: '2153861365',\n            address: '3925 Walnut St',\n            city: 'Philadelphia',\n            country: 'United States',\n            postalCode: '19104',\n            state: 'PA'\n          }\n        },\n        {\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [-77.043959498405, 38.903883387232]\n          },\n          properties: {\n            phoneFormatted: '(202) 331-3355',\n            phone: '2023313355',\n            address: '1901 L St. NW',\n            city: 'Washington DC',\n            country: 'United States',\n            crossStreet: 'at 19th St',\n            postalCode: '20036',\n            state: 'D.C.'\n          }\n        }\n      ]\n    }\n\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n    stores.features.forEach(function(store, i) {\n      store.properties.id = i\n    })\n\n    console.log(stores)\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n      // scrollZoom: true\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    /**\n     * Add geolocate control to the map.\n     **/\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      })\n    )\n\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n    map.addControl(new mapboxgl.NavigationControl())\n\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n    map.on('load', function(e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      })\n\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n      this.buildLocationList.bind(this)\n      this.addMarkers.bind(this)\n\n      buildLocationList(stores)\n      addMarkers()\n    })\n\n   \n  }\n\n /**\n     * Add a listing for each store to the sidebar.\n     **/\n    buildLocationList(data) {\n      data.features.forEach(function(store, i) {\n        /**\n         * Create a shortcut for `store.properties`,\n         * which will be used several times below.\n         **/\n        const prop = store.properties\n\n        /* Add a new listing section to the sidebar. */\n        const listings = document.getElementById('listings')\n        const listing = listings.appendChild(document.createElement('div'))\n        /* Assign a unique `id` to the listing. */\n        listing.id = 'listing-' + prop.id\n        /* Assign the `item` class to each listing for styling. */\n        listing.className = 'item'\n\n        /* Add the link to the individual listing created above. */\n        const link = listing.appendChild(document.createElement('a'))\n        link.href = '#'\n        link.className = 'title'\n        link.id = 'link-' + prop.id\n        link.innerHTML = prop.address\n\n        /* Add details to the individual listing. */\n        const details = listing.appendChild(document.createElement('div'))\n        details.innerHTML = prop.city\n        if (prop.phone) {\n          details.innerHTML += ' · ' + prop.phoneFormatted\n        }\n\n        /**\n         * Listen to the element and when it is hovered, do four things:\n         * 1. Update the `currentFeature` to the store associated with the clicked link\n         * 2. Fly to the point\n         * 3. Close all other popups and display popup for clicked store\n         * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n\n        link.addEventListener('mouseover', function(e) {\n          for (let i = 0; i < data.features.length; i++) {\n            if (this.id === 'link-' + data.features[i].properties.id) {\n              var clickedListing = data.features[i]\n              this.flyToStore(clickedListing)\n              this.createPopUp(clickedListing)\n            }\n          }\n          const activeItem = document.getElementsByClassName('active')\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active')\n          }\n          this.parentNode.classList.add('active')\n        })\n      })\n    }\n\n    /**\n     * Add a marker to the map for every store listing.\n     **/\n    addMarkers = () => {\n      /* For each feature in the GeoJSON object above: */\n      this.stores.features.forEach(function(marker) {\n        /* Create a div element for the marker. */\n        var el = document.createElement('div')\n        /* Assign a unique `id` to the marker. */\n        el.id = 'marker-' + marker.properties.id\n        /* Assign the `marker` class to each marker for styling. */\n        el.className = 'marker'\n\n        /**\n         * Create a marker using the div element\n         * defined above and add it to the map.\n         **/\n        new mapboxgl.Marker(el, { offset: [0, -23] })\n          .setLngLat(marker.geometry.coordinates)\n          .addTo(this.map)\n\n        /**\n         * Listen to the element and when it is clicked, do three things:\n         * 1. Fly to the point\n         * 2. Close all other popups and display popup for clicked store\n         * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n        el.addEventListener('click', function(e) {\n          /* Fly to the point */\n          this.flyToStore(marker)\n          /* Close all other popups and display popup for clicked store */\n          this.createPopUp(marker)\n          /* Highlight listing in sidebar */\n          var activeItem = document.getElementsByClassName('active')\n          e.stopPropagation()\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active')\n          }\n          var listing = document.getElementById(\n            'listing-' + marker.properties.id\n          )\n          listing.classList.add('active')\n        })\n      })\n    }\n    /**\n     * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n     * a given center point.\n     **/\n    flyToStore = (currentFeature) => {\n      this.map.flyTo({\n        center: currentFeature.geometry.coordinates,\n        zoom: 15\n      })\n    }\n\n    /**\n     * Create a Mapbox GL JS `Popup`.\n     **/\n    createPopUp = (currentFeature) => {\n      var popUps = document.getElementsByClassName('mapboxgl-popup')\n      if (popUps[0]) popUps[0].remove()\n      var popup = new mapboxgl.Popup({ closeOnClick: false })\n        .setLngLat(currentFeature.geometry.coordinates)\n        .setHTML(\n          '<h3>Sweetgreen</h3>' +\n            '<h4>' +\n            currentFeature.properties.address +\n            '</h4>'\n        )\n        .addTo(this.map)\n    }\n\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Hiking Trails</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"map\" />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}