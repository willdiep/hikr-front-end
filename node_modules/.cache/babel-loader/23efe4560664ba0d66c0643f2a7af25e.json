{"ast":null,"code":"var _jsxFileName = \"/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport '../map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    };\n  }\n\n  componentDidMount() {\n    // fetch()\n    console.log('hello'); // /**\n    //  * Assign a unique id to each store. You'll use this `id`\n    //  * later to associate each point on the map with a listing\n    //  * in the sidebar.\n    //  */\n    // stores.features.forEach(function(store, i) {\n    //   store.properties.id = i\n    // })\n    // console.log(stores)\n    // const map = new mapboxgl.Map({\n    //   container: this.mapContainer,\n    //   style: 'mapbox://styles/mapbox/streets-v11',\n    //   center: [this.state.lng, this.state.lat],\n    //   zoom: this.state.zoom\n    //   // scrollZoom: true\n    // })\n    // map.on('move', () => {\n    //   this.setState({\n    //     lng: map.getCenter().lng.toFixed(4),\n    //     lat: map.getCenter().lat.toFixed(4),\n    //     zoom: map.getZoom().toFixed(2)\n    //   })\n    // })\n    // /**\n    //  * Add geolocate control to the map.\n    //  **/\n    // map.addControl(\n    //   new mapboxgl.GeolocateControl({\n    //     positionOptions: {\n    //       enableHighAccuracy: true\n    //     },\n    //     trackUserLocation: true\n    //   })\n    // )\n    // /**\n    //  * Add zoom and rotation controls to the map.\n    //  **/\n    // map.addControl(new mapboxgl.NavigationControl())\n    // /**\n    //  * Wait until the map loads to make changes to the map.\n    //  */\n    // map.on('load', function(e) {\n    //   /**\n    //    * This is where your '.addLayer()' used to be, instead\n    //    * add only the source without styling a layer\n    //    */\n    //   map.addSource('places', {\n    //     type: 'geojson',\n    //     data: stores\n    //   })\n    //   /**\n    //    * Add all the things to the page:\n    //    * - The location listings on the side of the page\n    //    * - The markers onto the map\n    //    */\n    //   buildLocationList(stores)\n    //   addMarkers()\n    // })\n    // /**\n    //  * Add a listing for each store to the sidebar.\n    //  **/\n    // function buildLocationList(data) {\n    //   data.features.forEach(function(store, i) {\n    //     /**\n    //      * Create a shortcut for `store.properties`,\n    //      * which will be used several times below.\n    //      **/\n    //     const prop = store.properties\n    //     /* Add a new listing section to the sidebar. */\n    //     const listings = document.getElementById('listings')\n    //     const listing = listings.appendChild(document.createElement('div'))\n    //     /* Assign a unique `id` to the listing. */\n    //     listing.id = 'listing-' + prop.id\n    //     /* Assign the `item` class to each listing for styling. */\n    //     listing.className = 'item'\n    //     /* Add the link to the individual listing created above. */\n    //     const link = listing.appendChild(document.createElement('a'))\n    //     link.href = '#'\n    //     link.className = 'title'\n    //     link.id = 'link-' + prop.id\n    //     link.innerHTML = prop.address\n    //     /* Add details to the individual listing. */\n    //     const details = listing.appendChild(document.createElement('div'))\n    //     details.innerHTML = prop.city\n    //     if (prop.phone) {\n    //       details.innerHTML += ' Â· ' + prop.phoneFormatted\n    //     }\n    //     /**\n    //      * Listen to the element and when it is hovered, do four things:\n    //      * 1. Update the `currentFeature` to the store associated with the clicked link\n    //      * 2. Fly to the point\n    //      * 3. Close all other popups and display popup for clicked store\n    //      * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     link.addEventListener('mouseover', function(e) {\n    //       for (let i = 0; i < data.features.length; i++) {\n    //         if (this.id === 'link-' + data.features[i].properties.id) {\n    //           var clickedListing = data.features[i]\n    //           flyToStore(clickedListing)\n    //           createPopUp(clickedListing)\n    //         }\n    //       }\n    //       const activeItem = document.getElementsByClassName('active')\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       this.parentNode.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Add a marker to the map for every store listing.\n    //  **/\n    // function addMarkers() {\n    //   /* For each feature in the GeoJSON object above: */\n    //   stores.features.forEach(function(marker) {\n    //     /* Create a div element for the marker. */\n    //     var el = document.createElement('div')\n    //     /* Assign a unique `id` to the marker. */\n    //     el.id = 'marker-' + marker.properties.id\n    //     /* Assign the `marker` class to each marker for styling. */\n    //     el.className = 'marker'\n    //     /**\n    //      * Create a marker using the div element\n    //      * defined above and add it to the map.\n    //      **/\n    //     new mapboxgl.Marker(el, { offset: [0, -23] })\n    //       .setLngLat(marker.geometry.coordinates)\n    //       .addTo(map)\n    //     /**\n    //      * Listen to the element and when it is clicked, do three things:\n    //      * 1. Fly to the point\n    //      * 2. Close all other popups and display popup for clicked store\n    //      * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     el.addEventListener('click', function(e) {\n    //       /* Fly to the point */\n    //       flyToStore(marker)\n    //       /* Close all other popups and display popup for clicked store */\n    //       createPopUp(marker)\n    //       /* Highlight listing in sidebar */\n    //       var activeItem = document.getElementsByClassName('active')\n    //       e.stopPropagation()\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       var listing = document.getElementById(\n    //         'listing-' + marker.properties.id\n    //       )\n    //       listing.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n    //  * a given center point.\n    //  **/\n    // function flyToStore(currentFeature) {\n    //   map.flyTo({\n    //     center: currentFeature.geometry.coordinates,\n    //     zoom: 15\n    //   })\n    // }\n    // /**\n    //  * Create a Mapbox GL JS `Popup`.\n    //  **/\n    // function createPopUp(currentFeature) {\n    //   var popUps = document.getElementsByClassName('mapboxgl-popup')\n    //   if (popUps[0]) popUps[0].remove()\n    //   var popup = new mapboxgl.Popup({ closeOnClick: false })\n    //     .setLngLat(currentFeature.geometry.coordinates)\n    //     .setHTML(\n    //       '<h3>Sweetgreen</h3>' +\n    //         '<h4>' +\n    //         currentFeature.properties.address +\n    //         '</h4>'\n    //     )\n    //     .addTo(map)\n    // }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Hiking Trails\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","state","lng","lon","lat","zoom","componentDidMount","console","log","render","el","mapContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,YAAP;AAEAA,QAAQ,CAACC,WAAT,GACE,2FADF;;AAGA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAEF,KAAK,CAACG,GADA;AAEXC,MAAAA,GAAG,EAAEJ,KAAK,CAACI,GAFA;AAGXC,MAAAA,IAAI,EAAE;AAHK,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAFkB,CAIlqBADF,EASE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,EAIE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,SAAS,EAAC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CATF,EAeE;AAAK,MAAA,GAAG,EAAEC,EAAE,IAAK,KAAKC,YAAL,GAAoBD,EAArC;AAA0C,MAAA,SAAS,EAAC,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADF;AAoBD;;AA3OyB;;AA8O5B,eAAeZ,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport '../map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    }\n  }\n\n  componentDidMount() {\n    // fetch()\n    console.log('hello')\n\n    // /**\n    //  * Assign a unique id to each store. You'll use this `id`\n    //  * later to associate each point on the map with a listing\n    //  * in the sidebar.\n    //  */\n    // stores.features.forEach(function(store, i) {\n    //   store.properties.id = i\n    // })\n\n    // console.log(stores)\n    // const map = new mapboxgl.Map({\n    //   container: this.mapContainer,\n    //   style: 'mapbox://styles/mapbox/streets-v11',\n    //   center: [this.state.lng, this.state.lat],\n    //   zoom: this.state.zoom\n    //   // scrollZoom: true\n    // })\n\n    // map.on('move', () => {\n    //   this.setState({\n    //     lng: map.getCenter().lng.toFixed(4),\n    //     lat: map.getCenter().lat.toFixed(4),\n    //     zoom: map.getZoom().toFixed(2)\n    //   })\n    // })\n\n    // /**\n    //  * Add geolocate control to the map.\n    //  **/\n    // map.addControl(\n    //   new mapboxgl.GeolocateControl({\n    //     positionOptions: {\n    //       enableHighAccuracy: true\n    //     },\n    //     trackUserLocation: true\n    //   })\n    // )\n\n    // /**\n    //  * Add zoom and rotation controls to the map.\n    //  **/\n    // map.addControl(new mapboxgl.NavigationControl())\n\n    // /**\n    //  * Wait until the map loads to make changes to the map.\n    //  */\n    // map.on('load', function(e) {\n    //   /**\n    //    * This is where your '.addLayer()' used to be, instead\n    //    * add only the source without styling a layer\n    //    */\n    //   map.addSource('places', {\n    //     type: 'geojson',\n    //     data: stores\n    //   })\n\n    //   /**\n    //    * Add all the things to the page:\n    //    * - The location listings on the side of the page\n    //    * - The markers onto the map\n    //    */\n    //   buildLocationList(stores)\n    //   addMarkers()\n    // })\n\n    // /**\n    //  * Add a listing for each store to the sidebar.\n    //  **/\n    // function buildLocationList(data) {\n    //   data.features.forEach(function(store, i) {\n    //     /**\n    //      * Create a shortcut for `store.properties`,\n    //      * which will be used several times below.\n    //      **/\n    //     const prop = store.properties\n\n    //     /* Add a new listing section to the sidebar. */\n    //     const listings = document.getElementById('listings')\n    //     const listing = listings.appendChild(document.createElement('div'))\n    //     /* Assign a unique `id` to the listing. */\n    //     listing.id = 'listing-' + prop.id\n    //     /* Assign the `item` class to each listing for styling. */\n    //     listing.className = 'item'\n\n    //     /* Add the link to the individual listing created above. */\n    //     const link = listing.appendChild(document.createElement('a'))\n    //     link.href = '#'\n    //     link.className = 'title'\n    //     link.id = 'link-' + prop.id\n    //     link.innerHTML = prop.address\n\n    //     /* Add details to the individual listing. */\n    //     const details = listing.appendChild(document.createElement('div'))\n    //     details.innerHTML = prop.city\n    //     if (prop.phone) {\n    //       details.innerHTML += ' Â· ' + prop.phoneFormatted\n    //     }\n\n    //     /**\n    //      * Listen to the element and when it is hovered, do four things:\n    //      * 1. Update the `currentFeature` to the store associated with the clicked link\n    //      * 2. Fly to the point\n    //      * 3. Close all other popups and display popup for clicked store\n    //      * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n\n    //     link.addEventListener('mouseover', function(e) {\n    //       for (let i = 0; i < data.features.length; i++) {\n    //         if (this.id === 'link-' + data.features[i].properties.id) {\n    //           var clickedListing = data.features[i]\n    //           flyToStore(clickedListing)\n    //           createPopUp(clickedListing)\n    //         }\n    //       }\n    //       const activeItem = document.getElementsByClassName('active')\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       this.parentNode.classList.add('active')\n    //     })\n    //   })\n    // }\n\n    // /**\n    //  * Add a marker to the map for every store listing.\n    //  **/\n    // function addMarkers() {\n    //   /* For each feature in the GeoJSON object above: */\n    //   stores.features.forEach(function(marker) {\n    //     /* Create a div element for the marker. */\n    //     var el = document.createElement('div')\n    //     /* Assign a unique `id` to the marker. */\n    //     el.id = 'marker-' + marker.properties.id\n    //     /* Assign the `marker` class to each marker for styling. */\n    //     el.className = 'marker'\n\n    //     /**\n    //      * Create a marker using the div element\n    //      * defined above and add it to the map.\n    //      **/\n    //     new mapboxgl.Marker(el, { offset: [0, -23] })\n    //       .setLngLat(marker.geometry.coordinates)\n    //       .addTo(map)\n\n    //     /**\n    //      * Listen to the element and when it is clicked, do three things:\n    //      * 1. Fly to the point\n    //      * 2. Close all other popups and display popup for clicked store\n    //      * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n    //      **/\n    //     el.addEventListener('click', function(e) {\n    //       /* Fly to the point */\n    //       flyToStore(marker)\n    //       /* Close all other popups and display popup for clicked store */\n    //       createPopUp(marker)\n    //       /* Highlight listing in sidebar */\n    //       var activeItem = document.getElementsByClassName('active')\n    //       e.stopPropagation()\n    //       if (activeItem[0]) {\n    //         activeItem[0].classList.remove('active')\n    //       }\n    //       var listing = document.getElementById(\n    //         'listing-' + marker.properties.id\n    //       )\n    //       listing.classList.add('active')\n    //     })\n    //   })\n    // }\n    // /**\n    //  * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n    //  * a given center point.\n    //  **/\n    // function flyToStore(currentFeature) {\n    //   map.flyTo({\n    //     center: currentFeature.geometry.coordinates,\n    //     zoom: 15\n    //   })\n    // }\n\n    // /**\n    //  * Create a Mapbox GL JS `Popup`.\n    //  **/\n    // function createPopUp(currentFeature) {\n    //   var popUps = document.getElementsByClassName('mapboxgl-popup')\n    //   if (popUps[0]) popUps[0].remove()\n    //   var popup = new mapboxgl.Popup({ closeOnClick: false })\n    //     .setLngLat(currentFeature.geometry.coordinates)\n    //     .setHTML(\n    //       '<h3>Sweetgreen</h3>' +\n    //         '<h4>' +\n    //         currentFeature.properties.address +\n    //         '</h4>'\n    //     )\n    //     .addTo(map)\n    // }\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Hiking Trails</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"map\" />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}