{"ast":null,"code":"var _jsxFileName = \"/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js\";\nimport React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport '../map.css';\nmapboxgl.accessToken = 'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A';\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    };\n  }\n\n  componentDidMount() {\n    let trailsUrl = 'https://www.hikingproject.com/data/get-trails?lat=' + `${this.state.lat}` + '&lon=' + `${this.state.lng}` + '&maxDistance=10&key=200670860-5b467b02cad74880f091a3ea5d36d611';\n    fetch(trailsUrl).then(res => res.json()).then(result => {\n      console.log(result);\n    });\n    let stores = {\n      type: 'FeatureCollection',\n      features: [// {\n        //   type: 'Feature',\n        //   geometry: {\n        //     type: 'Point',\n        //     coordinates: [-77.034084142948, 38.909671288923]\n        //   },\n        //   properties: {\n        //     phoneFormatted: '(202) 234-7336',\n        //     phone: '2022347336',\n        //     address: '1471 P St NW',\n        //     city: 'Washington DC',\n        //     country: 'United States',\n        //     crossStreet: 'at 15th St NW',\n        //     postalCode: '20005',\n        //     state: 'D.C.'\n        //   }\n        // }\n      ]\n    };\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n\n    stores.features.forEach(function (store, i) {\n      store.properties.id = i;\n    });\n    console.log(stores);\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom // scrollZoom: true\n\n    });\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n    /**\n     * Add geolocate control to the map.\n     **/\n\n    map.addControl(new mapboxgl.GeolocateControl({\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true\n    }));\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n\n    map.addControl(new mapboxgl.NavigationControl());\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n\n    map.on('load', function (e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      });\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n\n      buildLocationList(stores);\n      addMarkers();\n    });\n    /**\n     * Add a listing for each store to the sidebar.\n     **/\n\n    function buildLocationList(data) {\n      data.features.forEach(function (store, i) {\n        /**\n         * Create a shortcut for `store.properties`,\n         * which will be used several times below.\n         **/\n        const prop = store.properties;\n        /* Add a new listing section to the sidebar. */\n\n        const listings = document.getElementById('listings');\n        const listing = listings.appendChild(document.createElement('div'));\n        /* Assign a unique `id` to the listing. */\n\n        listing.id = 'listing-' + prop.id;\n        /* Assign the `item` class to each listing for styling. */\n\n        listing.className = 'item';\n        /* Add the link to the individual listing created above. */\n\n        const link = listing.appendChild(document.createElement('a'));\n        link.href = '#';\n        link.className = 'title';\n        link.id = 'link-' + prop.id;\n        link.innerHTML = prop.address;\n        /* Add details to the individual listing. */\n\n        const details = listing.appendChild(document.createElement('div'));\n        details.innerHTML = prop.city;\n\n        if (prop.phone) {\n          details.innerHTML += ' Â· ' + prop.phoneFormatted;\n        }\n        /**\n         * Listen to the element and when it is hovered, do four things:\n         * 1. Update the `currentFeature` to the store associated with the clicked link\n         * 2. Fly to the point\n         * 3. Close all other popups and display popup for clicked store\n         * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n\n\n        link.addEventListener('mouseover', function (e) {\n          for (let i = 0; i < data.features.length; i++) {\n            if (this.id === 'link-' + data.features[i].properties.id) {\n              var clickedListing = data.features[i];\n              flyToStore(clickedListing);\n              createPopUp(clickedListing);\n            }\n          }\n\n          const activeItem = document.getElementsByClassName('active');\n\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active');\n          }\n\n          this.parentNode.classList.add('active');\n        });\n      });\n    }\n    /**\n     * Add a marker to the map for every store listing.\n     **/\n\n\n    function addMarkers() {\n      /* For each feature in the GeoJSON object above: */\n      stores.features.forEach(function (marker) {\n        /* Create a div element for the marker. */\n        var el = document.createElement('div');\n        /* Assign a unique `id` to the marker. */\n\n        el.id = 'marker-' + marker.properties.id;\n        /* Assign the `marker` class to each marker for styling. */\n\n        el.className = 'marker';\n        /**\n         * Create a marker using the div element\n         * defined above and add it to the map.\n         **/\n\n        new mapboxgl.Marker(el, {\n          offset: [0, -23]\n        }).setLngLat(marker.geometry.coordinates).addTo(map);\n        /**\n         * Listen to the element and when it is clicked, do three things:\n         * 1. Fly to the point\n         * 2. Close all other popups and display popup for clicked store\n         * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n\n        el.addEventListener('click', function (e) {\n          /* Fly to the point */\n          flyToStore(marker);\n          /* Close all other popups and display popup for clicked store */\n\n          createPopUp(marker);\n          /* Highlight listing in sidebar */\n\n          var activeItem = document.getElementsByClassName('active');\n          e.stopPropagation();\n\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active');\n          }\n\n          var listing = document.getElementById('listing-' + marker.properties.id);\n          listing.classList.add('active');\n        });\n      });\n    }\n    /**\n     * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n     * a given center point.\n     **/\n\n\n    function flyToStore(currentFeature) {\n      map.flyTo({\n        center: currentFeature.geometry.coordinates,\n        zoom: 15\n      });\n    }\n    /**\n     * Create a Mapbox GL JS `Popup`.\n     **/\n\n\n    function createPopUp(currentFeature) {\n      var popUps = document.getElementsByClassName('mapboxgl-popup');\n      if (popUps[0]) popUps[0].remove();\n      var popup = new mapboxgl.Popup({\n        closeOnClick: false\n      }).setLngLat(currentFeature.geometry.coordinates).setHTML('<h3>Sweetgreen</h3>' + '<h4>' + currentFeature.properties.address + '</h4>').addTo(map);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"FROM MAP.JS\"), React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Hiking Trails\")), React.createElement(\"div\", {\n      id: \"listings\",\n      className: \"listings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/Megan/Flatiron_School/hikr-front-end/hikr-front-end/src/components/Map.js"],"names":["React","Component","mapboxgl","accessToken","Map","constructor","props","state","lng","lon","lat","zoom","componentDidMount","trailsUrl","fetch","then","res","json","result","console","log","stores","type","features","forEach","store","i","properties","id","map","container","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","NavigationControl","e","addSource","data","buildLocationList","addMarkers","prop","listings","document","getElementById","listing","appendChild","createElement","className","link","href","innerHTML","address","details","city","phone","phoneFormatted","addEventListener","length","clickedListing","flyToStore","createPopUp","activeItem","getElementsByClassName","classList","remove","parentNode","add","marker","el","Marker","offset","setLngLat","geometry","coordinates","addTo","stopPropagation","currentFeature","flyTo","popUps","popup","Popup","closeOnClick","setHTML","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport '../map.css'\n\nmapboxgl.accessToken =\n  'pk.eyJ1Ijoid2lsbGQxMCIsImEiOiJjazVrZjgweGUwZGpiM2RucnB6ZW83cnF1In0.QuvhJzfhJrxg-dNfhVrJ7A'\n\nclass Map extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lng: props.lon,\n      lat: props.lat,\n      zoom: 9\n    }\n  }\n\n  componentDidMount() {\n    let trailsUrl = 'https://www.hikingproject.com/data/get-trails?lat=' + `${this.state.lat}` + '&lon=' + `${this.state.lng}` + '&maxDistance=10&key=200670860-5b467b02cad74880f091a3ea5d36d611'\n    fetch(trailsUrl)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        console.log(result)\n        \n      } \n    )\n\n    let stores = {\n      type: 'FeatureCollection',\n      features: [\n        // {\n        //   type: 'Feature',\n        //   geometry: {\n        //     type: 'Point',\n        //     coordinates: [-77.034084142948, 38.909671288923]\n        //   },\n        //   properties: {\n        //     phoneFormatted: '(202) 234-7336',\n        //     phone: '2022347336',\n        //     address: '1471 P St NW',\n        //     city: 'Washington DC',\n        //     country: 'United States',\n        //     crossStreet: 'at 15th St NW',\n        //     postalCode: '20005',\n        //     state: 'D.C.'\n        //   }\n        // }\n      ]\n    }\n\n    /**\n     * Assign a unique id to each store. You'll use this `id`\n     * later to associate each point on the map with a listing\n     * in the sidebar.\n     */\n    stores.features.forEach(function(store, i) {\n      store.properties.id = i\n    })\n\n    console.log(stores)\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n      // scrollZoom: true\n    })\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      })\n    })\n\n    /**\n     * Add geolocate control to the map.\n     **/\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        trackUserLocation: true\n      })\n    )\n\n    /**\n     * Add zoom and rotation controls to the map.\n     **/\n    map.addControl(new mapboxgl.NavigationControl())\n\n    /**\n     * Wait until the map loads to make changes to the map.\n     */\n    map.on('load', function(e) {\n      /**\n       * This is where your '.addLayer()' used to be, instead\n       * add only the source without styling a layer\n       */\n      map.addSource('places', {\n        type: 'geojson',\n        data: stores\n      })\n\n      /**\n       * Add all the things to the page:\n       * - The location listings on the side of the page\n       * - The markers onto the map\n       */\n      buildLocationList(stores)\n      addMarkers()\n    })\n\n    /**\n     * Add a listing for each store to the sidebar.\n     **/\n    function buildLocationList(data) {\n      data.features.forEach(function(store, i) {\n        /**\n         * Create a shortcut for `store.properties`,\n         * which will be used several times below.\n         **/\n        const prop = store.properties\n\n        /* Add a new listing section to the sidebar. */\n        const listings = document.getElementById('listings')\n        const listing = listings.appendChild(document.createElement('div'))\n        /* Assign a unique `id` to the listing. */\n        listing.id = 'listing-' + prop.id\n        /* Assign the `item` class to each listing for styling. */\n        listing.className = 'item'\n\n        /* Add the link to the individual listing created above. */\n        const link = listing.appendChild(document.createElement('a'))\n        link.href = '#'\n        link.className = 'title'\n        link.id = 'link-' + prop.id\n        link.innerHTML = prop.address\n\n        /* Add details to the individual listing. */\n        const details = listing.appendChild(document.createElement('div'))\n        details.innerHTML = prop.city\n        if (prop.phone) {\n          details.innerHTML += ' Â· ' + prop.phoneFormatted\n        }\n\n        /**\n         * Listen to the element and when it is hovered, do four things:\n         * 1. Update the `currentFeature` to the store associated with the clicked link\n         * 2. Fly to the point\n         * 3. Close all other popups and display popup for clicked store\n         * 4. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n\n        link.addEventListener('mouseover', function(e) {\n          for (let i = 0; i < data.features.length; i++) {\n            if (this.id === 'link-' + data.features[i].properties.id) {\n              var clickedListing = data.features[i]\n              flyToStore(clickedListing)\n              createPopUp(clickedListing)\n            }\n          }\n          const activeItem = document.getElementsByClassName('active')\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active')\n          }\n          this.parentNode.classList.add('active')\n        })\n      })\n    }\n\n    /**\n     * Add a marker to the map for every store listing.\n     **/\n    function addMarkers() {\n      /* For each feature in the GeoJSON object above: */\n      stores.features.forEach(function(marker) {\n        /* Create a div element for the marker. */\n        var el = document.createElement('div')\n        /* Assign a unique `id` to the marker. */\n        el.id = 'marker-' + marker.properties.id\n        /* Assign the `marker` class to each marker for styling. */\n        el.className = 'marker'\n\n        /**\n         * Create a marker using the div element\n         * defined above and add it to the map.\n         **/\n        new mapboxgl.Marker(el, { offset: [0, -23] })\n          .setLngLat(marker.geometry.coordinates)\n          .addTo(map)\n\n        /**\n         * Listen to the element and when it is clicked, do three things:\n         * 1. Fly to the point\n         * 2. Close all other popups and display popup for clicked store\n         * 3. Highlight listing in sidebar (and remove highlight for all other listings)\n         **/\n        el.addEventListener('click', function(e) {\n          /* Fly to the point */\n          flyToStore(marker)\n          /* Close all other popups and display popup for clicked store */\n          createPopUp(marker)\n          /* Highlight listing in sidebar */\n          var activeItem = document.getElementsByClassName('active')\n          e.stopPropagation()\n          if (activeItem[0]) {\n            activeItem[0].classList.remove('active')\n          }\n          var listing = document.getElementById(\n            'listing-' + marker.properties.id\n          )\n          listing.classList.add('active')\n        })\n      })\n    }\n    /**\n     * Use Mapbox GL JS's `flyTo` to move the camera smoothly\n     * a given center point.\n     **/\n    function flyToStore(currentFeature) {\n      map.flyTo({\n        center: currentFeature.geometry.coordinates,\n        zoom: 15\n      })\n    }\n\n    /**\n     * Create a Mapbox GL JS `Popup`.\n     **/\n    function createPopUp(currentFeature) {\n      var popUps = document.getElementsByClassName('mapboxgl-popup')\n      if (popUps[0]) popUps[0].remove()\n      var popup = new mapboxgl.Popup({ closeOnClick: false })\n        .setLngLat(currentFeature.geometry.coordinates)\n        .setHTML(\n          '<h3>Sweetgreen</h3>' +\n            '<h4>' +\n            currentFeature.properties.address +\n            '</h4>'\n        )\n        .addTo(map)\n    }\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <h3>FROM MAP.JS</h3>\n        {/* <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{' '}\n            {this.state.zoom}\n          </div>\n        </div> */}\n\n        <div className=\"sidebar\">\n          <div className=\"heading\">\n            <h1>Hiking Trails</h1>\n          </div>\n          <div id=\"listings\" className=\"listings\"></div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"map\" />\n        {/* <div id='map' class='map'></div> */}\n      </div>\n    )\n  }\n}\n\nexport default Map\n"]},"metadata":{},"sourceType":"module"}